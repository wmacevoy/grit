#!/bin/bash

# find mojavaton base directory
if [ -z "$MOJAVATON_DIR" -o ! -d $MOJAVATON_DIR/drivers ]
then
  for ups in . .. ../.. ../../.. ../../../..
  do
    if [ -d $(dirname $0)/$ups/drivers ]
    then
      export MOJAVATON_DIR=$(realpath $(dirname $0)/$ups)
      break
    fi
  done
fi

if [ -z "$MOJAVATON_DIR" -o ! -d $MOJAVATON_DIR/drivers ]
then
  echo "could not determine base mojavaton directory"
  exit 1
fi

pid()
{
    app=$1
    if [ -f $MOJAVATON_DIR/pids/$app.pid ]
    then
	pid=$(cat $MOJAVATON_DIR/pids/$app.pid)
	if ps -eo pid | egrep -q '\<'$pid'\>'
	then
	    echo $pid
	    return
	fi
    fi
    echo -1
}

running()
{
  test $(pid $app) -ne -1
}

has_leapd()
{
    ps aux | grep leapd | grep -v -q grep
}

term_leapd()
{
    ps aux | grep leapd | grep -v grep |  (while read uid pid rest; do echo "term leapd($pid)..."; kill $pid; done)
}

kill_leapd()
{
    ps aux | grep leapd | grep -v grep |  (while read uid pid rest; do echo "kill leapd($pid)..."; kill -9 $pid; done)
}

stop_app()
{
  app=$1

  term_tries=2
  kill_tries=2

  for try in $(seq 1 $((term_tries+$kill_tries)))
  do
      if ! running $app
      then
	  echo $app stopped
	  /bin/rm -rf $MOJAVATON_DIR/pids/$app.pid
	  return 0
      fi

      if [ $try -le $term_tries ]
      then
	  echo sending term to $app...
	  kill $(cat $MOJAVATON_DIR/pids/$app.pid)
      else
	  echo sending kill to $app...
	  kill -9 $(cat $MOJAVATON_DIR/pids/$app.pid)
      fi
      sleep 1
  done
  return 1
}

stop_apps()
{
    for app in "$@"
    do
	stop_app $app
    done
}


prioritize()
{
    for app in "$@"
    do
	app_pid=$(pid $app)
	if [ $app_pid -ne -1 ]
	then
	    priority=0
	    app_pid=$(pid $app)
	    case $app in
		*) priority=0;;
	    esac
	    if renice -n $priority -p $(pid $app)
	    then
		echo set priority of $app to $priority
	    else
		echo failed to set priority of $app to $priority		
	    fi
	fi
    done
}

start_app()
{
  app=$1
  app_pid=$(pid $app)

  if [ $app_pid -ne -1 ]
  then
      echo $app already running as pid $app_pid
      return 0
  fi

  if [ $app = "leapPublisher" ] ; then
      if has_leapd ; then
	  term_leapd
	  if has_leapd ; then
	      sleep 1
	      if has_leapd ; then
		  kill_leapd
	      fi
	  fi
      fi
  fi
  
  mkdir -p $MOJAVATON_DIR/pids
  mkdir -p $MOJAVATON_DIR/logs
  cd $MOJAVATON_DIR/control/$app
  $MOJAVATON_DIR/control/$app/bin/$app >$MOJAVATON_DIR/logs/$app.log 2>&1 &
  app_pid=$!
  echo $app_pid > $MOJAVATON_DIR/pids/$app.pid
  echo $app started as pid $app_pid
  prioritize $app
}

start_apps()
{
    for app in "$@"
    do
	if ! start_app $app
	then
	    return 1
	fi
    done
    return 0
}

setup()
{
  # add bin folders to PATH
  for bin in $MOJAVATON_DIR/drivers/*/bin $MOJAVATON_DIR/control/*/bin
  do
    PATH="$bin:$PATH"
  done

  # add 3rd party and project library paths
  for lib in $MOJAVATON_DIR/libs/lib $MOJAVATON_DIR/pre/*/lib $MOJAVATON_DIR/drivers/*/lib $MOJAVATON_DIR/control/*/lib
  do
    export LD_LIBRARY_PATH="$lib:$LD_LIBRARY_PATH"
    export PYTHONPATH="$lib:$PYTHONPATH"
  done

  if [ "`uname -m`" = "x86_64" ]
  then
      LEAP_LIB=$MOJAVATON_DIR/libs/LeapSDK/lib/x64
  else
      LEAP_LIB=$MOJAVATON_DIR/libs/LeapSDK/lib/x86
  fi
  LD_LIBRARY_PATH="$LEAP_LIB:$LD_LIBRARY_PATH"
}

update()
{
  for dir in setup libs pre drivers centaur control
  do
      svn update $MOJAVATON_DIR/$dir
  done
}

build()
{
  for dir in libs pre drivers centaur control
  do
      make -C $MOJAVATON_DIR/$dir "$@"
  done
}

commit()
{
  for dir in setup libs drivers centaur control
  do
      svn commit -m "$@ - in $dir" $MOJAVATON_DIR/$dir
  done
}

commander()
{
    cd $MOJAVATON_DIR/control/commander
    bin/commander
}

start()
{
    start_apps leapPublisher glovePublisher webcamRequester heartBeatRequester joystickProvider gui
}

stop()
{
    stop_apps leapPublisher glovePublisher webcamRequester heartBeatRequester joystickProvider gui
}

synctime()
{
  sudo ntpdate 132.163.4.101
}

go()
{
    start
    commander
    stop
}

setup

"$@"
