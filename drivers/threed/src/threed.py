# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_threed', [dirname(__file__)])
        except ImportError:
            import _threed
            return _threed
        if fp is not None:
            try:
                _mod = imp.load_module('_threed', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _threed = swig_import_helper()
    del swig_import_helper
else:
    import _threed
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _threed.SHARED_PTR_DISOWN
class Vec3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _threed.Vec3d_data_set
    __swig_getmethods__["data"] = _threed.Vec3d_data_get
    if _newclass:data = _swig_property(_threed.Vec3d_data_get, _threed.Vec3d_data_set)
    def __init__(self, *args): 
        this = _threed.new_Vec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _threed.Vec3d_x(self, *args)
    def y(self, *args): return _threed.Vec3d_y(self, *args)
    def z(self, *args): return _threed.Vec3d_z(self, *args)
    def __call__(self, *args): return _threed.Vec3d___call__(self, *args)
    __swig_destroy__ = _threed.delete_Vec3d
    __del__ = lambda self : None;
Vec3d_swigregister = _threed.Vec3d_swigregister
Vec3d_swigregister(Vec3d)
cvar = _threed.cvar
Vec3d.ex = _threed.cvar.Vec3d_ex
Vec3d.ey = _threed.cvar.Vec3d_ey
Vec3d.ez = _threed.cvar.Vec3d_ez
Vec3d.o = _threed.cvar.Vec3d_o


def dot(*args):
  return _threed.dot(*args)
dot = _threed.dot

def cross(*args):
  return _threed.cross(*args)
cross = _threed.cross

def length2(*args):
  return _threed.length2(*args)
length2 = _threed.length2

def length(*args):
  return _threed.length(*args)
length = _threed.length

def unit(*args):
  return _threed.unit(*args)
unit = _threed.unit

def dist(*args):
  return _threed.dist(*args)
dist = _threed.dist

def __rshift__(*args):
  return _threed.__rshift__(*args)
__rshift__ = _threed.__rshift__
class Mat3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mat3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mat3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _threed.Mat3d_data_set
    __swig_getmethods__["data"] = _threed.Mat3d_data_get
    if _newclass:data = _swig_property(_threed.Mat3d_data_get, _threed.Mat3d_data_set)
    def __init__(self, *args): 
        this = _threed.new_Mat3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _threed.Mat3d___call__(self, *args)
    __swig_getmethods__["identity"] = lambda x: _threed.Mat3d_identity
    if _newclass:identity = staticmethod(_threed.Mat3d_identity)
    __swig_getmethods__["zero"] = lambda x: _threed.Mat3d_zero
    if _newclass:zero = staticmethod(_threed.Mat3d_zero)
    def ex(self): return _threed.Mat3d_ex(self)
    def ey(self): return _threed.Mat3d_ey(self)
    def ez(self): return _threed.Mat3d_ez(self)
    def o(self): return _threed.Mat3d_o(self)
    __swig_destroy__ = _threed.delete_Mat3d
    __del__ = lambda self : None;
Mat3d_swigregister = _threed.Mat3d_swigregister
Mat3d_swigregister(Mat3d)

def Mat3d_identity():
  return _threed.Mat3d_identity()
Mat3d_identity = _threed.Mat3d_identity

def Mat3d_zero():
  return _threed.Mat3d_zero()
Mat3d_zero = _threed.Mat3d_zero


def translate(*args):
  return _threed.translate(*args)
translate = _threed.translate

def rotate(*args):
  return _threed.rotate(*args)
rotate = _threed.rotate

def scale(*args):
  return _threed.scale(*args)
scale = _threed.scale

def inverse(*args):
  return _threed.inverse(*args)
inverse = _threed.inverse
class Arc3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arc3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Arc3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frame"] = _threed.Arc3d_frame_set
    __swig_getmethods__["frame"] = _threed.Arc3d_frame_get
    if _newclass:frame = _swig_property(_threed.Arc3d_frame_get, _threed.Arc3d_frame_set)
    __swig_setmethods__["radius"] = _threed.Arc3d_radius_set
    __swig_getmethods__["radius"] = _threed.Arc3d_radius_get
    if _newclass:radius = _swig_property(_threed.Arc3d_radius_get, _threed.Arc3d_radius_set)
    __swig_setmethods__["theta0"] = _threed.Arc3d_theta0_set
    __swig_getmethods__["theta0"] = _threed.Arc3d_theta0_get
    if _newclass:theta0 = _swig_property(_threed.Arc3d_theta0_get, _threed.Arc3d_theta0_set)
    __swig_setmethods__["theta1"] = _threed.Arc3d_theta1_set
    __swig_getmethods__["theta1"] = _threed.Arc3d_theta1_get
    if _newclass:theta1 = _swig_property(_threed.Arc3d_theta1_get, _threed.Arc3d_theta1_set)
    def pose(self, *args): return _threed.Arc3d_pose(self, *args)
    def fromPoints(self, *args): return _threed.Arc3d_fromPoints(self, *args)
    def __init__(self): 
        this = _threed.new_Arc3d()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _threed.delete_Arc3d
    __del__ = lambda self : None;
Arc3d_swigregister = _threed.Arc3d_swigregister
Arc3d_swigregister(Arc3d)

def __add__(*args):
  return _threed.__add__(*args)
__add__ = _threed.__add__

def __sub__(*args):
  return _threed.__sub__(*args)
__sub__ = _threed.__sub__

def __neg__(*args):
  return _threed.__neg__(*args)
__neg__ = _threed.__neg__

def __mul__(*args):
  return _threed.__mul__(*args)
__mul__ = _threed.__mul__

# This file is compatible with both classic and new-style classes.


def __lshift__(*args):
  return _threed.__lshift__(*args)
__lshift__ = _threed.__lshift__

