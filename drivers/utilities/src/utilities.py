# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utilities', [dirname(__file__)])
        except ImportError:
            import _utilities
            return _utilities
        if fp is not None:
            try:
                _mod = imp.load_module('_utilities', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _utilities = swig_import_helper()
    del swig_import_helper
else:
    import _utilities
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _utilities.SHARED_PTR_DISOWN
class istream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def get(self): return _utilities.istream_get(self)
    __swig_destroy__ = _utilities.delete_istream
    __del__ = lambda self : None;
istream_swigregister = _utilities.istream_swigregister
istream_swigregister(istream)

class ostream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def put(self, *args): return _utilities.ostream_put(self, *args)
    __swig_destroy__ = _utilities.delete_ostream
    __del__ = lambda self : None;
ostream_swigregister = _utilities.ostream_swigregister
ostream_swigregister(ostream)

class ifstream(istream):
    __swig_setmethods__ = {}
    for _s in [istream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ifstream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ifstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _utilities.new_ifstream(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self): return _utilities.ifstream_get(self)
    __swig_destroy__ = _utilities.delete_ifstream
    __del__ = lambda self : None;
ifstream_swigregister = _utilities.ifstream_swigregister
ifstream_swigregister(ifstream)

class ofstream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _utilities.new_ofstream(*args)
        try: self.this.append(this)
        except: self.this = this
    def put(self, *args): return _utilities.ofstream_put(self, *args)
    __swig_destroy__ = _utilities.delete_ofstream
    __del__ = lambda self : None;
ofstream_swigregister = _utilities.ofstream_swigregister
ofstream_swigregister(ofstream)


def cin():
  return _utilities.cin()
cin = _utilities.cin

def cout():
  return _utilities.cout()
cout = _utilities.cout
class Configure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Configure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Configure, name)
    __repr__ = _swig_repr
    def path(self, *args): return _utilities.Configure_path(self, *args)
    def load(self, *args): return _utilities.Configure_load(self, *args)
    def pathfind(self, *args): return _utilities.Configure_pathfind(self, *args)
    def set(self, *args): return _utilities.Configure_set(self, *args)
    def args(self, *args): return _utilities.Configure_args(self, *args)
    def str(self, *args): return _utilities.Configure_str(self, *args)
    def num(self, *args): return _utilities.Configure_num(self, *args)
    def flag(self, *args): return _utilities.Configure_flag(self, *args)
    def list(self, *args): return _utilities.Configure_list(self, *args)
    def show(self, *args): return _utilities.Configure_show(self, *args)
    def find(self, *args): return _utilities.Configure_find(self, *args)
    def servos(self, *args): return _utilities.Configure_servos(self, *args)
    def servoNames(self): return _utilities.Configure_servoNames(self)
    def substitute(self, *args): return _utilities.Configure_substitute(self, *args)
    def servo(self, *args): return _utilities.Configure_servo(self, *args)
    def __init__(self): 
        this = _utilities.new_Configure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _utilities.delete_Configure
    __del__ = lambda self : None;
Configure_swigregister = _utilities.Configure_swigregister
Configure_swigregister(Configure)


def now():
  return _utilities.now()
now = _utilities.now
# This file is compatible with both classic and new-style classes.


