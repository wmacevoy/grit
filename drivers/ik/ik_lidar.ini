#
# generated configuration file.
#
[flags]
prefix="ik_lidar" # prefix prepended to function and argument names
precision="single" # can be "double" or "single"
namespace="" # used by c++ generator 
main="false" # if true, then a main() is defined by the c++ generator
solver="damped_newton"
coptgen="true"
[globals] # values shared among all cells
epsilon
steps
[parameters] # values specific to each cell
necklr
neckud
px
py
pz
waist
residual
[variables]
_necklr
_neckud
[initializers] # initial guess for solution of variables in terms of parameters/globals
_necklr=necklr
_neckud=neckud
[equations] # system of equations variables should be a root of
residual0=cos(0.0174532925199433*_necklr)*px+sin(((-0.0174532925199433))*_neckud)*sin(0.0174532925199433*_necklr)*pz+((-1.0))*cos(((-0.0174532925199433))*_neckud)*sin(0.0174532925199433*_necklr)*py
residual1=sin(((-0.0174532925199433))*waist)*sin(0.0174532925199433*_necklr)*px+(cos(((-0.0174532925199433))*_neckud)*cos(((-0.0174532925199433))*waist)+((-1.0))*cos(0.0174532925199433*_necklr)*sin(((-0.0174532925199433))*_neckud)*sin(((-0.0174532925199433))*waist))*pz+(cos(((-0.0174532925199433))*_neckud)*cos(0.0174532925199433*_necklr)*sin(((-0.0174532925199433))*waist)+cos(((-0.0174532925199433))*waist)*sin(((-0.0174532925199433))*_neckud))*py
[updates] # how parameters are updated in terms of temp variables
necklr=_necklr
neckud=_neckud
[tests]
#
[runs]
#
[end]
