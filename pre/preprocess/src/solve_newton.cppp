// newton solver

  $(target) void $(prefix)solve(
    $(cuda_declare_args)
    const $(type) globals[$(nglobals())],
    $(type) *parameters,
    $(type) *x
  )
  {
    $(prefix)initialize($(cuda_args)globals,parameters,x);
    // newton iteration
    int steps=int(globals[$(global_index_of("steps"))]);
    $(type) epsilon=globals[$(global_index_of("epsilon"))];
    $(type) residual;
  
    for (int step=0; step<steps; ++step) {
      $(type) y[$(nvariables())];
      $(type) dx[$(nvariables())];
      $(type) dy[$(nequations()*nvariables())];
      int iwork[$(nequations())];
  
      $(prefix)f($(cuda_args)globals,parameters,x,y);
      $(prefix)df($(cuda_args)globals,parameters,x,dy);
      $(prefix)$(cudaprefix)linear_solve($(nvariables()),iwork,dy,y,dx);
#!if (target == "__device__") {
      for (int k=0; k<$(nvariables()); ++k) { x[chunk*k+cell] -= dx[k]; }
#!} else {
      for (int k=0; k<$(nvariables()); ++k) { x[k] -= dx[k]; }
#!}
      if ((residual = $(prefix)$(cudaprefix)norm($(nequations()),y)) <= epsilon) break;
    }
#!if (unchecked_parameter_index_of("residual") != -1) {
#!  if (target == "__device__") {
    parameters[chunk*$(parameter_index_of("residual"))+cell]=residual;
#!  } else {
    parameters[$(parameter_index_of("residual"))]=residual;
#!  }
#!}
  } // $(target) $(prefix)solve()
