#!#include "utilities.hpp"
#!#include "preprocess.hpp"
#!#include "linearalgebra.hpp"
#!#include "symbolic.hpp"
#!#include "coptgen.hpp"
#!#include "formatter.hpp"
#!#include <iostream>
#!#include <iomanip>
#!#include <fstream>
#!#include <sstream>
#!#include <assert.h>
#!
#!using namespace std;
#!using namespace symbolic;
#!using namespace utilities;
#!
#!namespace preprocess {
#!
#!class CppCodeGenerator : public CodeGenerator {
#!public:
#!  LinearAlgebra linearAlgebra;
#!  string file;
#!  string prefix;
#!  string precision;
#!  string type;
#!  size_t dim;
#!  enum { SOURCE=0x01, HEADER=0x02 };
#!  int mode;
#!
#!  void configure(Configuration *_configuration) {
#!    CodeGenerator::configure(_configuration);
#!
#!    file=flag("file");
#!    mode=0;
#!
#!    if (endswith(file,".cpp")) {
#!      mode |= SOURCE;
#!    }
#!
#!    if (endswith(file,".hpp") || endswith(file,".h")) {
#!      mode |= HEADER;
#!    }
#!
#!    if (!mode) {
#!      mode = SOURCE | HEADER;
#!    }
#!
#!    if ((mode & SOURCE) != 0) {
#!      configuration->flags["is_source"]="true";
#!    }
#!
#!    if ((mode & HEADER) != 0) {
#!      configuration->flags["is_header"]="true";
#!    }
#!
#!    prefix=flag("prefix");
#!    precision=flag("precision","double");
#!
#!    if (precision == "single") {
#!      type="float";
#!    } else if (precision == "double") {
#!      type="double";
#!    } else {
#!      cerr << "cppcodegenerator: unsupported precision " << encode_string(precision) << endl;
#!      return;
#!    }
#!
#!    configuration->flags["type"]=type;
#!
#!    dim=nequations();
#!    linearAlgebra.generator=this;
#!    linearAlgebra.configure();
#!  }
#!
#!  void begin_namespace()
#!  {
#!    if (flag("namespace") != "") {

namespace $(flag("namespace")) {

#!      indent +=2;
#!    }
#!  }
#!
#!
#!  void end_namespace()
#!  {
#!    if (flag("namespace") != "") {
#!      indent -=2;

} // namespace $(flag("namespace"))

#!    }
#!  }
#!
#!  void prototype_function(const std::string &end="")
#!  {
void $(prefix)f(
  const $(type) $(prefix)globals[$(nglobals())],
  const $(type) $(prefix)parameters[$(nparameters())],
  const $(type) $(prefix)x[$(nvariables())],
  $(type) $(prefix)y[$(nequations())]
)$(end)
#!  }
#!
#!  void define_function()
#!  {
#!prototype_function();
{
#!    if (flag("coptgen")=="true") {
#!      COptGen coptgen;
#!      coptgen.type=type;
#!      coptgen.format=default_format;
#!      FOREACH_EQUATION(i) {
#!        coptgen.assign(i->first,i->second);
#!      }
#!      coptgen.print(*out);
#!    } else {
#!      FOREACH_EQUATION(i) {
  // $(i->first)=$(i->second);
  $(format(i->first))=$(format(i->second));
#!      }
#!    }
} // $(prefix)f()

#!  } // define_function
#!
#!  void prototype_jacobian(const std::string &end="")
#!  {
#!
void $(prefix)df(
  const $(type) $(prefix)globals[$(nglobals())],
  const $(type) $(prefix)parameters[$(nparameters())],
  const $(type) $(prefix)x[$(nvariables())],
  $(type) $(prefix)dy[$(nequations()*nvariables())]
)$(end)
#!  }
#!
#!  void define_jacobian()
#!  {
#!prototype_jacobian();
{
#!    if (flag("coptgen")=="true") {
#!      COptGen coptgen;
#!      coptgen.type=type;
#!      coptgen.format = default_format;
#!      FOREACH_EQUATION(i) {
#!        Expression *ri=parse(i->first);
#!        Expression *yi=parse(i->second);
#!        FOREACH_VARIABLE(j) {
#!          Expression *xj=parse(*j);
#!          Expression *dyi_dxj=differentiate(yi,*j);
#!          std::ostringstream oss;
#!          oss << "d" << format(ri) << "_d" << format(xj);
#!          std::string dydx= oss.str();
#!          coptgen.assign(dydx,dyi_dxj);
#!          delete dyi_dxj;
#!          delete xj;
#!        }
#!        delete yi;
#!        delete ri;
#!      }
#!      coptgen.print(*out);
#!    } else {
#!      FOREACH_EQUATION(i) {
#!        Expression *ri=parse(i->first);
#!        Expression *yi=parse(i->second);
#!        FOREACH_VARIABLE(j) {
#!          Expression *xj=parse(*j);
#!          Expression *dyi_dxj=differentiate(yi,*j);
  d$(format(ri))_d$(format(xj))=$(format(dyi_dxj));
#!          delete dyi_dxj;
#!          delete xj;
#!        }
#!        delete yi;
#!        delete ri;
#!      }
#!    }
} // $(prefix)df()
#!  } // define_jacobian()
#!
#!  void prototype_solve(const std::string &end="")
#!  {
void $(prefix)solve(
  const $(type) globals[$(nglobals())],
  $(type) parameters[$(nparameters())],
  $(type) x[$(nvariables())]
)$(end)
#!  }
#!
#!  void define_solve()
#!  {
#!    string target="";
#!    string cudaprefix="";
#!    string solver=flag("solver","newton");
#!    string cuda_args="";
#!    string cuda_declare_args="";
#!    if (solver=="newton") {
#!#include "solve_newton.hpp"
#!    }
#!    if (solver=="damped_newton") {
#!#include "solve_damped_newton.hpp"
#!    }
#!    if (solver=="empty") {
#!#include "solve_empty.hpp"
#!    }
#!  } // define_solve()
#!
#!  void prototype_initialize(const std::string &end="")
#!  {
void $(prefix)initialize(
  const $(type) $(prefix)globals[$(nglobals())],
  const $(type) $(prefix)parameters[$(nparameters())],
  $(type) $(prefix)x[$(nvariables())]
)$(end)
#!  }
#!
#!  void define_initialize()
#!  {
#!prototype_initialize();
{
  // initialize unknowns from parameters
#!FOREACH_INITIALIZER(k) {
  // $(k->first)=$(k->second);
  $(format(k->first))=$(format(k->second));
#!}
} // $(prefix)initialize()
#!  } // define_initialize()
#!
#!  void prototype_update(const std::string &end="")
#!  {
void $(prefix)update(
  const $(type) $(prefix)globals[$(nglobals())],
  $(type) $(prefix)parameters[$(nparameters())]
)$(end)
#!  }
#!
#!  void define_update()
#!  {
#!prototype_update();
{
  $(type) $(prefix)x[$dim];
  $(prefix)solve($(prefix)globals,$(prefix)parameters,$(prefix)x);

#!    FOREACH_UPDATE(k) {
  // $(k->first)=$(k->second)
  $(format(k->first))=$(format(k->second));
#!    }
} // $(prefix)update()

#!  } // define_update()
#!
#!  std::string numeric_values(Configuration::Case &c, std::list < std::string > &group) {
#!    std::ostringstream oss;
#!    oss << "{";
#!    for (std::list < std::string > :: iterator i = group.begin(); i!=group.end(); ++i) {
#!      if (i != group.begin()) { oss << ","; }
#!      std::list < std::pair < std::string , double > > :: iterator j=c.setup.begin();
#!      while (j != c.setup.end()) {
#!        if (*i == j->first) break;
#!        ++j;
#!      }
#!      oss << "/* " << format(*i) << "= */ " << std::setprecision(15) 
#!         << ((j != c.setup.end() ) ? j->second : 0.0);
#!    }
#!    oss << "}";
#!    return oss.str();
#!  }
#!
#!  void prototype_data() {

typedef union 
{
  struct {
#! FOREACH_GLOBAL(i) {
       $(type) $(*i);
#! }   
  } as_struct;
  float as_array[$(nglobals())];
} $(prefix)globals;

typedef union 
{
  struct {
#! FOREACH_PARAMETER(i) {
       $(type) $(*i);
#! }   
  } as_struct;
  float as_array[$(nparameters())];
} $(prefix)parameters;

typedef union 
{
  struct {
#! FOREACH_VARIABLE(i) {
       $(type) $(*i);
#! }   
  } as_struct;
  float as_array[$(nvariables())];
} $(prefix)variables;

#!  } // prototype data
#!
#!  void prototype_names(const std::string &end="")
#!  {
enum { $(prefix)global_count=$(nglobals()) };
extern const char *$(prefix)global_names[$(nglobals())];

enum { $(prefix)parameter_count=$(nparameters()) };
extern const char *$(prefix)parameter_names[$(nparameters())];

enum { $(prefix)variable_count=$(nvariables()) };
extern const char *$(prefix)variable_names[$(nvariables())];

enum { $(prefix)equation_count=$(nvariables()) };
extern const char *$(prefix)equation_names[$(nequations())];
#!  }
#!
#!  void define_names()
#!  {
#!    prototype_names();
const char *$(prefix)global_names[]={
#!{int count=0, last=nglobals()-1; FOREACH_GLOBAL(j) {
  $(encode_string_always(*j))$((count != last)?",":"")
#! ++count;}}
};

const char *$(prefix)parameter_names[]={
#!{int count=0, last=nparameters()-1; FOREACH_PARAMETER(j) {
  $(encode_string_always(*j))$((count != last)?",":"")
#! ++count;}}
};

const char *$(prefix)variable_names[]={
#! {int count=0, last=nvariables()-1; FOREACH_VARIABLE(j) {
  $(encode_string_always(*j))$((count != last)?",":"")
#! ++count; }}
};

const char *$(prefix)equation_names[]={
#! {int count=0, last=nequations()-1; FOREACH_EQUATION(j) {
  $(encode_string_always(j->first))$((count != last)?",":"")
#! ++count; }}
};

#!  }
#!
#!  void prototype_tests(const std::string &end="")
#!  {
void $(prefix)tests(const std::string &$(prefix)name)$end
#!  }
#!
#!  void define_tests()
#!  {
typedef struct {
  const char *$(prefix)name;
  $(type) $(prefix)globals[$(nglobals())];
  $(type) $(prefix)parameters[$(nparameters())];
  $(type) $(prefix)x[$(nvariables())];
} $(prefix)test_data_t;

$(prefix)test_data_t $(prefix)test_data[] = {
#!  {int count=1; FOREACH_TEST(k) {
#!    Configuration::Case &c=*k;
  { /* test case $count */
    /* name= */ "$(c.name)",
    $(numeric_values(c,configuration->globals)),
    $(numeric_values(c,configuration->parameters)),
    $(numeric_values(c,configuration->variables))
  }$(k==configuration->tests.end() ? "" : ",")
#!  ++count; }}
}; // $(prefix)test_data
#!    
#!prototype_tests();
{
  std::string $(prefix)case_name;
  std::string $(prefix)max_x_error_name="none";
  int $(prefix)max_x_error_count=0;
  $(type) $(prefix)max_x_error=0;
  $(type) $(prefix)x_error=0;
  std::string $(prefix)max_y_error_name="none";
  int $(prefix)max_y_error_count=0;
  $(type) $(prefix)max_y_error=0;
  $(type) $(prefix)y_error=0;

  $(type) $(prefix)x_test[$(dim)];
  $(type) $(prefix)y_test[$(dim)];

  for (int $(prefix)case_count=0; $(prefix)case_count < $(ntests()); ++$(prefix)case_count) {
    if ($(prefix)name == "all" || $(prefix)name == $(prefix)test_data[$(prefix)case_count].$(prefix)name) {
       const char *$(prefix)name=$(prefix)test_data[$(prefix)case_count].$(prefix)name;
       $(type) *$(prefix)globals=$(prefix)test_data[$(prefix)case_count].$(prefix)globals;
       $(type) *$(prefix)parameters=$(prefix)test_data[$(prefix)case_count].$(prefix)parameters;
       $(type) *$(prefix)x=$(prefix)test_data[$(prefix)case_count].$(prefix)x;

       $(prefix)solve($(prefix)globals,$(prefix)parameters,$(prefix)x_test);
       $(prefix)f($(prefix)globals,$(prefix)parameters,$(prefix)x_test,$(prefix)y_test);
       $(prefix)x_error=$(prefix)dist($dim,$(prefix)x,$(prefix)x_test);
       $(prefix)y_error=$(prefix)norm($dim,$(prefix)y_test);

       if ($(prefix)x_error > $(prefix)max_x_error) {
         $(prefix)max_x_error=$(prefix)x_error;
         $(prefix)max_x_error_name=$(prefix)name;
         $(prefix)max_x_error_count=$(prefix)case_count;
       }

       if ($(prefix)y_error > $(prefix)max_y_error) {
         $(prefix)max_y_error=$(prefix)y_error;
         $(prefix)max_y_error_name=$(prefix)name;
         $(prefix)max_y_error_count=$(prefix)case_count;
       }

       std::cout << "test " << ($(prefix)case_count+1) << "/" << "\"" << $(prefix)name << "\"" << ": " << "x_error=" << std::setprecision(15) << $(prefix)x_error << "," << "y_error=" << std::setprecision(15) << $(prefix)y_error << std::endl;
     }
   }
   if ($(prefix)name == "all") {
     std::cout << "test summary: " 
       << "max_x_error=" << std::setprecision(15) << $(prefix)max_x_error
          << " from " << $(prefix)max_x_error_count << "/" 
          << "\"" << $(prefix)max_x_error_name << "\""
       << ","
       << "max_y_error=" << std::setprecision(15) << $(prefix)max_y_error
          << " from " << $(prefix)max_y_error_count << "/" 
          << "\"" << $(prefix)max_y_error_name << "\""
       << std::endl;
   }
}
#!  }
#!
#!
#!  void prototype_runs(const std::string &end="")
#!  {
void $(prefix)runs(const std::string &$(prefix)name)$end
#!  }
#!
#!  void define_runs()
#!  {
typedef struct {
  const char *$(prefix)name;
  $(type) $(prefix)globals[$(nglobals())];
  $(type) $(prefix)parameters[$(nparameters())];
} $(prefix)run_data_t;

$(prefix)run_data_t $(prefix)run_data[] = {
#!  {int count=1; FOREACH_RUN(k) {
#!    Configuration::Case &c=*k;
  { /* run case $count */
    /* name= */ "$(c.name)",
    $(numeric_values(c,configuration->globals)),
    $(numeric_values(c,configuration->parameters)),
  }$(k==configuration->runs.end() ? "" : ",")
#!  ++count; }}
}; // $(prefix)run_data
#!    
#!prototype_runs();
{
  std::string $(prefix)case_name;
  for (int $(prefix)case_count=0; $(prefix)case_count < $(nruns()); ++$(prefix)case_count) {
    if ($(prefix)name == "all" || $(prefix)name == $(prefix)run_data[$(prefix)case_count].$(prefix)name) {
      const char *$(prefix)case_name=$(prefix)run_data[$(prefix)case_count].$(prefix)name;
      $(type) *$(prefix)globals=$(prefix)run_data[$(prefix)case_count].$(prefix)globals;
      $(type) *$(prefix)parameters=$(prefix)run_data[$(prefix)case_count].$(prefix)parameters;
      $(type) $(prefix)x[$(dim)];

      $(prefix)solve($(prefix)globals,$(prefix)parameters,$(prefix)x);
      std::cout << "[case] # " << ($(prefix)case_count+1) << std::endl;
      std::cout << "name=\"" << $(prefix)case_name << "\"" << std::endl;

      for (int i=0; i<$(prefix)global_count; ++i) {
        std::cout << $(prefix)global_names[i] << "=" << std::setprecision(15) << $(prefix)globals[i] << std::endl;
      }

      for (int i=0; i<$(prefix)parameter_count; ++i) {
        std::cout << $(prefix)parameter_names[i] << "=" << std::setprecision(15) << $(prefix)parameters[i] << std::endl;
      }

      for (int i=0; i<$(prefix)variable_count; ++i) {
        std::cout << $(prefix)variable_names[i] << "=" << std::setprecision(15) << $(prefix)x[i] << std::endl;
      }
    }
  }
} // $(prefix)runs()
#!  }
#!
#!  void prototype_main(const std::string &end="")
#!  {
int main(int argc, const char *argv[])$(end)
#!  }
#!
#!  void define_main()
#!  {
#!    prototype_main();
{
  $(flag("namespace"))::$(prefix)Stopwatch timer;
  timer.start();
  for (int argi=1; argi<argc; ++argi) {
    std::string arg=argv[argi];

    if (arg == "-tests") {
      $(flag("namespace"))::$(prefix)tests("all"); 
      continue; 
    }
    if (arg == "-runs") {
      $(flag("namespace"))::$(prefix)runs("all"); 
      continue; 
    }
    if (arg == "-test") {
      $(flag("namespace"))::$(prefix)tests(argv[++argi]);
      continue;
    }
    if (arg == "-run") {
      $(flag("namespace"))::$(prefix)runs(argv[++argi]);
      continue;
    }
    if (arg != "-h") {
      std::cout << "unknown arg " << arg << std::endl;
    }
    std::cout << "usage: " << argv[0] << " [-h] [-tests] [-runs] [-test <case> ...] [-run <case> ...]" << std::endl;
    std::cout << "test cases:";
    for (int test_count=0; test_count<$(ntests()); ++test_count) {
      std::cout << " \"" << $(flag("namespace"))::$(prefix)test_data[test_count].$(prefix)name << "\"";
    }
    std::cout << std::endl;
    std::cout << "run cases:";
    for (int run_count=0; run_count<$(nruns()); ++run_count) {
      std::cout << " \"" << $(flag("namespace"))::$(prefix)run_data[run_count].$(prefix)name << "\"";
    }
    std::cout << std::endl;
  }
  timer.stop();
  std::cout << "Time elapsed in seconds: " << timer.time() << std::endl;
  return 0;
} // main()
#!  }
#!
#!  void generate_header()
#!  {
#!    string file_hpp=file;
#!    if (!endswith(file,".hpp") && !endswith(file,".h")) {
#!      file_hpp += ".hpp";
#!    }
#!    ofstream outfile(file_hpp.c_str());
#!    out=&outfile;
#!    if (!*out) {
#!      cerr << "cppcodegenerator: could not write to configured header file " << encode_string(file) << endl;
#!      return;
#!    }
#!
#!    (*out) << "#pragma once" << endl;

#include <string>
#include <stdint.h>
#include <string.h>


#!    begin_namespace();
#!
#!    prototype_data();
#!    prototype_names(";");
#!    linearAlgebra.prototype_all();
#!
#!    prototype_solve(";");
#!    prototype_initialize(";");
#!    prototype_update(";");
#!    prototype_function(";");
#!    prototype_jacobian(";");
#!    prototype_tests(";");
#!    prototype_runs(";");
#!
#!    end_namespace();
#!
#!    if (flag("main") == "true") {
#!      prototype_main(";");
#!    }
#!
#!    (*out) << endl;
#!  }
#!
#!  void define_aliases()
#!  {
#!    int count;
#!
#!    o() << "// global aliases" << endl;
#!    { int count=0; FOREACH_GLOBAL(i) {
#!      o() << "#define " << format(*i) << " " << prefix << "globals[" << count << "]" << endl;
#!      ++count; 
#!      }}
#!    o() << endl;
#!
#!    o() << "// parameter aliases" << endl;
#!    { int count=0; FOREACH_PARAMETER(i) {
#!      o() << "#define " << format(*i) << " " << prefix << "parameters[" << count << "]" << endl;
#!      ++count;
#!      }}
#!    o() << endl;
#!
#!    o() << "// variable aliases" << endl;
#!    { int count=0; FOREACH_VARIABLE(i) {
#!      o() << "#define " << format(*i) << " " << prefix << "x[" << count << "]" << endl;
#!      ++count;
#!      }}
#!    o() << endl;
#!
#!    o() << "// residual aliases" << endl;
#!    { int count=0; FOREACH_EQUATION(i) {
#!      o() << "#define " << format(i->first) << " " << prefix << "y[" << count << "]" << endl;
#!      ++count;
#!      }}
#!    o() << endl;
#!
#!    o() << "// jacobian aliases (fortran order)" << endl;
#!    { int icount=0; FOREACH_EQUATION(i) {
#!      { int jcount=0; FOREACH_VARIABLE(j) {
#!          o() << "#define " << "d" << format(i->first) << "_d" << format(*j) << " " << prefix << "dy[" << (dim*jcount+icount) << "]" << endl;
#!          ++jcount;
#!        }}
#!      ++icount;
#!      }}
#!    o() << endl;
#!
#!  }
#!
#!  void includes()
#!  {
#include <iostream>
#include <iomanip>
#include <math.h>
#include <sys/time.h>
#include <cassert>
#!  }
#!
#!  void define_stopwatch()
#!  {
class $(prefix)Stopwatch
{
public:
  struct timeval startTime, endTime, diffTime;
  void start() {
    gettimeofday(&startTime,NULL);
  }
  void stop() {
    gettimeofday(&endTime,NULL);
    timersub(&endTime,&startTime,&diffTime);
  }
  double time()
  {
    return diffTime.tv_sec + 1e-6*diffTime.tv_usec;
  }
};
#!  }
#!
#!  void generate_source()
#!  {
#!    string file_cpp=file;
#!    if (!endswith(file,".cpp")) {
#!      file_cpp += ".cpp";
#!    }
#!    ofstream outfile(file_cpp.c_str());
#!    out=&outfile;
#!    if (!*out) {
#!      cerr << "cppcodegenerator: could not write to configured source file " << encode_string(file) << endl;
#!      return;
#!    }
#!    includes();
#!
#!    begin_namespace();
#!
#!    define_names();
#!
#!    define_stopwatch();
#!
#!    linearAlgebra.define_all();
#!    prototype_function(";");
#!    prototype_jacobian(";");
#!    prototype_initialize(";");
#!    prototype_update(";");
#!    define_solve();
#!    define_tests();
#!    define_runs();
#!    define_aliases();
#!    define_initialize();
#!    define_update();
#!    define_function();
#!    define_jacobian();
#!
#!    end_namespace();
#!
#!    if (flag("main") == "true") {
#!      define_main();
#!    }
#!
#!  }
#!
#!  
#!  void generate()
#!  {
#!#ifdef SYMBOLIC_OUT_MODE
#!    if (precision == "single"){
#!      Expression::outMode=Expression::OUT_MODE_C_SINGLE;
#!    }
#!    else {
#!      Expression::outMode=Expression::OUT_MODE_C_DOUBLE;
#!    }
#!#endif
#!    if (mode & SOURCE) {
#!      generate_source();
#!    }
#!
#!    if (mode & HEADER) {
#!      generate_header();
#!    }
#!  }
#!};
#!
#!class CppRegister {
#!public:
#!  CppRegister()
#!  {
#!    CodeGenerator *generator = new CppCodeGenerator();
#!    CodeGenerator::registry_add("cpp",generator);
#!    CodeGenerator::registry_add("c++",generator);
#!  }
#!};
#!
#!static const CppRegister CPP_REGISTER;
#!
#!}
